tmp(0) := "0100000000000";	-- LDI $0          	# Carrega o acumulador com o valor 0
tmp(1) := "0101100100000";	-- STA @288        	# Armazena o valor do acumulador em HEX0
tmp(2) := "0101100100001";	-- STA @289        	# Armazena o valor do acumulador em HEX1
tmp(3) := "0101100100010";	-- STA @290        	# Armazena o valor do acumulador em HEX2
tmp(4) := "0101100100011";	-- STA @291        	# Armazena o valor do acumulador em HEX3
tmp(5) := "0101100100100";	-- STA @292        	# Armazena o valor do acumulador em HEX4
tmp(6) := "0101100100101";	-- STA @293        	# Armazena o valor do acumulador em HEX5
tmp(7) := "0101100000000";	-- STA @256        	# Armazena o valor do bit0 do acumulador no LDR0 ~ LEDR7
tmp(8) := "0101100000001";	-- STA @257        	# Armazena o valor do bit0 do acumulador no LDR8 
tmp(9) := "0101100000010";	-- STA @258        	# Armazena o valor do bit0 do acumulador no LDR9 
tmp(10) := "0101000000000";	-- STA @0				# Armazena o valor do acumulador em MEM[0] (unidades)
tmp(11) := "0101000000001";	-- STA @1				# Armazena o valor do acumulador em MEM[1] (dezenas)
tmp(12) := "0101000000010";	-- STA @2				# Armazena o valor do acumulador em MEM[2] (centenas)
tmp(13) := "0101000000011";	-- STA @3				# Armazena o valor do acumulador em MEM[3] (unidades de milhar)
tmp(14) := "0101000000100";	-- STA @4				# Armazena o valor do acumulador em MEM[4] (dezenas de milhar)
tmp(15) := "0101000000101";	-- STA @5				# Armazena o valor do acumulador em MEM[5] (centenas de milhar)
tmp(16) := "0100000000001";	-- LDI $1  	  
tmp(17) := "0101000001111";	-- STA @15
tmp(18) := "0101111111111";	-- STA @511  	    	# Limpa KEY0
tmp(19) := "0100000000000";	-- LDI $0          	# Carrega 0 no acumulador
tmp(20) := "0101000001101";	-- STA @13         	# salva 0 no MEM[13]
tmp(21) := "0100000001010";	-- LDI $10         	# Carrega 10
tmp(22) := "0101000001110";	-- STA @14         	# salva 10 no MEM[14]
tmp(23) := "0000000000000";	-- Inicio:
tmp(24) := "0001101100000";	-- LDA @352        	# Armazena o valor lido no KEY0 (ler KEY0)
tmp(25) := "1000000001101";	-- CEQ @13  	    	# CEQ compara o valor de MEM[13] (zero) com o valor do KEY0
tmp(26) := "0111000011100";	-- JEQ @Pula1  		# JEQ para PULA 1 (temp 20)
tmp(27) := "1001000011111";	-- JSR @Incrementa 	# JSR para INCREMENTA (temp 32)
tmp(28) := "0000000000000";	-- Pula1:
tmp(29) := "1001001011001";	-- JSR @Display 		# JSR para DISPLAY (tmp 50)
tmp(30) := "0110000010111";	-- JMP @Inicio  		# JMP para INCIO
tmp(31) := "0000000000000";	-- Incrementa:
tmp(32) := "0101111111111";	-- STA @511  	    	# Limpa KEY0
tmp(33) := "0001000000000";	-- LDA @0  	    	# Carrega valor da unidade
tmp(34) := "0010000001111";	-- SOMA @15        	# soma 1
tmp(35) := "1000000001110";	-- CEQ @14         	# Compara o incremento com 10
tmp(36) := "0111000100111";	-- JEQ @Dezena     	# Pula para Dezena tmp(40)
tmp(37) := "0101000000000";	-- STA @0  	    	# Salva o valor da unidade
tmp(38) := "1010000000000";	-- RET  	        	# Retorno pela unidade
tmp(39) := "0000000000000";	-- Dezena:
tmp(40) := "0100000000000";	-- LDI $0  	    	# carrega 0
tmp(41) := "0101000000000";	-- STA @0          	# Limpa unidade
tmp(42) := "0001000000001";	-- LDA @1          	# carrega dezena
tmp(43) := "0010000001111";	-- SOMA @15        	# soma 1
tmp(44) := "1000000001110";	-- CEQ @14         	# compara o incremento com 10
tmp(45) := "0111000110000";	-- JEQ @Centena    	# Pula para Centena
tmp(46) := "0101000000001";	-- STA @1          	# salva na dezena
tmp(47) := "1010000000000";	-- RET  	        	# Retorno pela dezena
tmp(48) := "0000000000000";	-- Centena:
tmp(49) := "0100000000000";	-- LDI $0          	# carrega 0
tmp(50) := "0101100100001";	-- STA @289          	# limpa dezena 
tmp(51) := "0001000000010";	-- LDA @2          	# carrega centena 
tmp(52) := "0010000001111";	-- SOMA @15        	# soma 1
tmp(53) := "1000000001110";	-- CEQ @14         	# compara o incremento com 10
tmp(54) := "0111000111001";	-- JEQ @Milhar     	# pula para milhar
tmp(55) := "0101100100010";	-- STA @290          	# salva na centena
tmp(56) := "1010000000000";	-- RET             	# retorno pela centena
tmp(57) := "0000000000000";	-- Milhar:
tmp(58) := "0100000000000";	-- LDI $0          	# carrega 0
tmp(59) := "0101100100010";	-- STA @290          	# limpa centena 
tmp(60) := "0001000000011";	-- LDA @3          	# carrega milhar 
tmp(61) := "0010000001111";	-- SOMA @15        	# soma 1
tmp(62) := "1000000001110";	-- CEQ @14         	# compara o incremento com 10
tmp(63) := "0111001000010";	-- JEQ @DezenaMilhar    	# pula para dezena de milhar 
tmp(64) := "0101100100011";	-- STA @291          	# salva no milhar
tmp(65) := "1010000000000";	-- RET             	# retorno pelo milhar
tmp(66) := "0000000000000";	-- DezenaMilhar:
tmp(67) := "0100000000000";	-- LDI $0          	# carrega 0
tmp(68) := "0101100100011";	-- STA @291          	# limpa milhar 
tmp(69) := "0001000000100";	-- LDA @4          	# carrega dezena de milhar 
tmp(70) := "0010000001111";	-- SOMA @15        	# soma 1
tmp(71) := "1000000001110";	-- CEQ @14        	# compara o incremento com 10
tmp(72) := "0111001001011";	-- JEQ @CentenaMilhar   	# pula para centena de milhar 
tmp(73) := "0101100100100";	-- STA @292          	# salva na dezena de milhar 
tmp(74) := "1010000000000";	-- RET             	# retorno pela dezena de milhar
tmp(75) := "0000000000000";	-- CentenaMilhar:
tmp(76) := "0100000000000";	-- LDI $0          	# carrega 0
tmp(77) := "0101100100100";	-- STA @292          	# limpa dezena de milhar 
tmp(78) := "0001000000101";	-- LDA @5          	# carrega centena de milhar 
tmp(79) := "0010000001111";	-- SOMA @15        	# soma 1
tmp(80) := "1000000001110";	-- CEQ @14         	# compara o incremento com 10
tmp(81) := "0111001010100";	-- JEQ @Estouro    	# pula para estouro da contagem
tmp(82) := "0101100100101";	-- STA @293          	# salva na centena de milhar 
tmp(83) := "1010000000000";	-- RET             	# retorno pela centena de milhar 
tmp(84) := "0000000000000";	-- Estouro:
tmp(85) := "0100011111111";	-- LDI $255        	# carrega 255 no acumulador
tmp(86) := "0101100000000";	-- STA @256        	# armazena 255 em LEDR0 at√© LEDR7
tmp(87) := "0000000000000";	-- FIM:
tmp(88) := "0110001010111";	-- JMP @FIM        	# pula para o fim
tmp(89) := "0000000000000";	-- Display:
tmp(90) := "0001000000000";	-- LDA @0  	    	# Carrega valor da unidade
tmp(91) := "0101100100000";	-- STA @288  	    	# Escrevendo no display HEX0
tmp(92) := "0001000000001";	-- LDA @1  	    	# Carrega valor da dezena
tmp(93) := "0101100100001";	-- STA @289  	    	# Escrevendo no display HEX1
tmp(94) := "1010000000000";	-- RET             	# Retorna subrotina
